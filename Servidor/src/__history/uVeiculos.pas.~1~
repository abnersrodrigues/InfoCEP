unit uVeiculos;

interface

uses
  REST.Json.Types, FireDAC.Comp.Client, Data.DB, System.DateUtils,
  System.SysUtils, System.Classes, Datasnap.DBClient,
  Data.DBXInterBase, Data.SqlExpr, Data.FMTBcd, Datasnap.Provider,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.MSSQL, FireDAC.Phys.MSSQLDef, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Comp.UI, StdCtrls, windows,
  FireDAC.Phys.MySQL, FireDAC.Phys.MySQLDef, Clipbrd
  ;

{$M+}


//Funcion
function Add(
              AnoFabricacao,
              CaixaCambio,
              CapacidadeCarga,
              Carroceria,
              CilindradasCm3,
              Cmt,
              Combustivel,
              Cor,
              EixoTraseiroDiferencial,
              MarcaModelo,
              Municipio,
              NumeroChassi,
              NumeroMotor,
              Pbt,
              Placa,
              PotenciaCavalos,
              Procedencia,
              QuantidadeEixos,
              QuantidadePassageiros,
              SituacaoChassi,
              TipoCarroceria,
              TipoMontagem,
              TipoVeiculo,
              Uf : String
           ):boolean;



implementation

Uses udmPrincipal, ufrmPrincipal;

function Add(
              AnoFabricacao,
              CaixaCambio,
              CapacidadeCarga,
              Carroceria,
              CilindradasCm3,
              Cmt,
              Combustivel,
              Cor,
              EixoTraseiroDiferencial,
              MarcaModelo,
              Municipio,
              NumeroChassi,
              NumeroMotor,
              Pbt,
              Placa,
              PotenciaCavalos,
              Procedencia,
              QuantidadeEixos,
              QuantidadePassageiros,
              SituacaoChassi,
              TipoCarroceria,
              TipoMontagem,
              TipoVeiculo,
              Uf : String
           ):boolean;
Var
  post, get : TFDQuery;
Begin
  try
    get := TFDQuery.Create(nil);
    get.Connection := dmPrincipal.CONEXAO;

    with get do
      Begin
        Close;
        SQL.Clear;
        SQL.Add('Select Placa from tab_veiculos');
        SQL.Add('where Placa like :Placa');
          Params.ParamByName('Placa').Value := Placa;
        Open;

        if get.RecordCount > 0 then
          Begin
            frmPrincipal.mem_log.Lines.Add('Erro: '+ Placa +' | arquivo em duplicidade ou ja inserido no banco de dados');
            Result := false;
            get.Free;
            exit;
          End;
      End;
    get.Free;
  Except
    get.Free;
  end;

  try
    post := TFDQuery.Create(nil);
    post.Connection := dmPrincipal.CONEXAO;

    with post do
      Begin
        Close;
        SQL.Clear;
        SQL.Add('insert into tab_veiculos');
        SQL.Add('(AnoFabricacao, CaixaCambio, CapacidadeCarga, Carroceria, CilindradasCm3,');
        SQL.Add('Cmt, Combustivel, Cor, eixotraseirodiferencial, MarcaModelo, Municipio,');
        SQL.Add('NumeroChassi, NumeroMotor, Pbt, Placa, PotenciaCavalos, Procedencia, QuantidadeEixos,');
        SQL.Add('QuantidadePassageiros, SituacaoChassi, TipoCarroceria, TipoMontagem, TipoVeiculo, Uf)');
        SQL.Add('values');
        SQL.Add('(:AnoFabricacao, :CaixaCambio, :CapacidadeCarga, :Carroceria, :CilindradasCm3,');
        SQL.Add(':Cmt, :Combustivel, :Cor, :eixotraseirodiferencial, :MarcaModelo, :Municipio,');
        SQL.Add(':NumeroChassi, :NumeroMotor, :Pbt, :Placa, :PotenciaCavalos, :Procedencia, :QuantidadeEixos,');
        SQL.Add(':QuantidadePassageiros, :SituacaoChassi, :TipoCarroceria, :TipoMontagem, :TipoVeiculo, :Uf)');

        Params.ParamByName('AnoFabricacao').value := AnoFabricacao;
        Params.ParamByName('CaixaCambio').value := CaixaCambio;
        Params.ParamByName('CapacidadeCarga').value := CapacidadeCarga;
        Params.ParamByName('Carroceria').value := Carroceria;
        Params.ParamByName('CilindradasCm3').value := CilindradasCm3;
        Params.ParamByName('Cmt').value := Cmt;
        Params.ParamByName('Combustivel').value := Combustivel;
        Params.ParamByName('Cor').value := Cor;
        Params.ParamByName('eixotraseirodiferencial').value := EixoTraseiroDiferencial;
        Params.ParamByName('MarcaModelo').value := MarcaModelo;
        Params.ParamByName('Municipio').value := Municipio;
        Params.ParamByName('NumeroChassi').value := NumeroChassi;
        Params.ParamByName('NumeroMotor').value := NumeroMotor;
        Params.ParamByName('Pbt').value := Pbt;
        Params.ParamByName('Placa').value := Placa;
        Params.ParamByName('PotenciaCavalos').value := PotenciaCavalos;
        Params.ParamByName('Procedencia').value := Procedencia;
        Params.ParamByName('QuantidadeEixos').value := QuantidadeEixos;
        Params.ParamByName('QuantidadePassageiros').value := QuantidadePassageiros;
        Params.ParamByName('SituacaoChassi').value := SituacaoChassi;
        Params.ParamByName('TipoCarroceria').value := TipoCarroceria;
        Params.ParamByName('TipoMontagem').value := TipoMontagem;
        Params.ParamByName('TipoVeiculo').value := TipoVeiculo;
        Params.ParamByName('Uf').value := Uf;

        ExecSQL;

        Result := true;

      End;
    post.Free;
  Except
    Result := false;
    post.Free;
  end;
End;

end.
