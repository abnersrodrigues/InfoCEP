unit uModel.Principal;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool,
  FireDAC.Stan.Async, FireDAC.Phys, FireDAC.VCLUI.Wait, Data.DB,
  FireDAC.Comp.Client, FireDAC.Phys.PGDef, FireDAC.Phys.PG, FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs, FireDAC.Comp.UI,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.Comp.DataSet,
  FireDAC.Stan.StorageBin, System.IniFiles, Vcl.Forms;

type
  TdmPrincipal = class(TDataModule)
    cnnConexao: TFDConnection;
    FDPhysPgDriverLink: TFDPhysPgDriverLink;
    FDGUIxWaitCursor: TFDGUIxWaitCursor;
  private

    { Private declarations }
  public
    { Public declarations }

    function Add(AnoFabricacao, CaixaCambio, CapacidadeCarga, Carroceria,
      CilindradasCm3, Cmt, Combustivel, Cor, EixoTraseiroDiferencial,
      MarcaModelo, Municipio, NumeroChassi, NumeroMotor, Pbt, Placa,
      PotenciaCavalos, Procedencia, QuantidadeEixos, QuantidadePassageiros,
      SituacaoChassi, TipoCarroceria, TipoMontagem, TipoVeiculo,
      Uf: String): boolean;
    function AddPlaca: boolean;
    class function Log(txt: String): Boolean; static;
    class function LogPlacas(txt: String): Boolean; static;

    //Gravando Comparação
    function AddLogPlacas(AnoFabricacao, CaixaCambio, CapacidadeCarga,
      Carroceria, CilindradasCm3, Cmt, Combustivel, Cor,
      EixoTraseiroDiferencial, MarcaModelo, Municipio, NumeroChassi,
      NumeroMotor, Pbt, Placa, PotenciaCavalos, Procedencia, QuantidadeEixos,
      QuantidadePassageiros, SituacaoChassi, TipoCarroceria, TipoMontagem,
      TipoVeiculo, Uf: String): boolean;


    function fnc_LerIni: Boolean;
    function fnc_GravarIni: Boolean;
    function fnc_configura_bd: Boolean;
  end;


Var
  dmPrincipal   : TdmPrincipal;
  fbase         : string;

implementation


{$R *.dfm}

{$region 'Função Add Log de Diferença entre Campos'}
function TdmPrincipal.AddLogPlacas(AnoFabricacao, CaixaCambio, CapacidadeCarga, Carroceria,
  CilindradasCm3, Cmt, Combustivel, Cor, EixoTraseiroDiferencial,
  MarcaModelo, Municipio, NumeroChassi, NumeroMotor, Pbt, Placa,
  PotenciaCavalos, Procedencia, QuantidadeEixos, QuantidadePassageiros,
  SituacaoChassi, TipoCarroceria, TipoMontagem, TipoVeiculo,
  Uf: String): boolean;
Var
  post : TFDQuery;
Begin
  try
    post := TFDQuery.Create(nil);
    post.Connection := cnnConexao;

    with post do
      Begin
        Close;
        SQL.Clear;
        SQL.Add('insert into tab_log_compare');
        SQL.Add('(AnoFabricacao, CaixaCambio, CapacidadeCarga, Carroceria, CilindradasCm3,');
        SQL.Add('Cmt, Combustivel, Cor, eixotraseirodiferencial, MarcaModelo, Municipio,');
        SQL.Add('NumeroChassi, NumeroMotor, Pbt, Placa, PotenciaCavalos, Procedencia, QuantidadeEixos,');
        SQL.Add('QuantidadePassageiros, SituacaoChassi, TipoCarroceria, TipoMontagem, TipoVeiculo, Uf)');
        SQL.Add('values');
        SQL.Add('(:AnoFabricacao, :CaixaCambio, :CapacidadeCarga, :Carroceria, :CilindradasCm3,');
        SQL.Add(':Cmt, :Combustivel, :Cor, :eixotraseirodiferencial, :MarcaModelo, :Municipio,');
        SQL.Add(':NumeroChassi, :NumeroMotor, :Pbt, :Placa, :PotenciaCavalos, :Procedencia, :QuantidadeEixos,');
        SQL.Add(':QuantidadePassageiros, :SituacaoChassi, :TipoCarroceria, :TipoMontagem, :TipoVeiculo, :Uf)');

        Params.ParamByName('AnoFabricacao').value := AnoFabricacao;
        Params.ParamByName('CaixaCambio').value := CaixaCambio;
        Params.ParamByName('CapacidadeCarga').value := CapacidadeCarga;
        Params.ParamByName('Carroceria').value := Carroceria;
        Params.ParamByName('CilindradasCm3').value := CilindradasCm3;
        Params.ParamByName('Cmt').value := Cmt;
        Params.ParamByName('Combustivel').value := Combustivel;
        Params.ParamByName('Cor').value := Cor;
        Params.ParamByName('eixotraseirodiferencial').value := EixoTraseiroDiferencial;
        Params.ParamByName('MarcaModelo').value := MarcaModelo;
        Params.ParamByName('Municipio').value := Municipio;
        Params.ParamByName('NumeroChassi').value := NumeroChassi;
        Params.ParamByName('NumeroMotor').value := NumeroMotor;
        Params.ParamByName('Pbt').value := Pbt;
        Params.ParamByName('Placa').value := Placa;
        Params.ParamByName('PotenciaCavalos').value := PotenciaCavalos;
        Params.ParamByName('Procedencia').value := Procedencia;
        Params.ParamByName('QuantidadeEixos').value := QuantidadeEixos;
        Params.ParamByName('QuantidadePassageiros').value := QuantidadePassageiros;
        Params.ParamByName('SituacaoChassi').value := SituacaoChassi;
        Params.ParamByName('TipoCarroceria').value := TipoCarroceria;
        Params.ParamByName('TipoMontagem').value := TipoMontagem;
        Params.ParamByName('TipoVeiculo').value := TipoVeiculo;
        Params.ParamByName('Uf').value := Uf;

        ExecSQL;

        Result := true;

      End;
    post.Free;
  Except
    Result := false;
    post.Free;
  end;
End;
{$endregion}

//Lanca Log em txt lancamentos das Placas
{$region 'Arquivo de Log em txt'}
class function TdmPrincipal.Log(txt:String):Boolean;
var
  f   : TextFile;
  Arq : string;
begin
  Arq := ExtractFilePath(ParamStr(0)) + 'log.txt'; //txt na raiz do .exe

  AssignFile(f, Arq);
  Append(f);
  Writeln(f, txt);
  Flush(f);
  CloseFile(f);
end;
{$endregion}

//Lanca Log em txt Confronto em tabelas Veiculos (api antiga) vs Placas (api atual)
{$region 'Arquivo de Log em txt'}
class function TdmPrincipal.LogPlacas(txt:String):Boolean;
var
  f   : TextFile;
  Arq : string;
begin
  Arq := ExtractFilePath(ParamStr(0)) + 'logplacas.txt';  //txt na raiz do .exe

  AssignFile(f, Arq);
  Append(f);
  Writeln(f, txt);
  Flush(f);
  CloseFile(f);
end;
{$endregion}

end.
